{"version":3,"sources":["media/bell.mp3","components/Timer.jsx","components/CountdownInput.jsx","components/Countdown.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Timer","state","timerOn","runningTime","startTimer","startTime","Date","now","setState","timer","setInterval","stopTimer","clearInterval","resetTimer","msToTime","duration","milliseconds","parseInt","seconds","minutes","this","className","type","onClick","Component","CountdownInput","props","handleChangeSlider","handleChangeInputMinutes","handleChangeInputSeconds","disabled","min","max","step","onChange","tooltipVisible","value","autoFocus","PureComponent","defaultProps","Countdown","start","countDownTime","onCountdown","audio","play","Math","floor","stop","reset","startTimeCountdown","Audio","audioSRC","percent","round","showInfo","TabPane","Tabs","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e38f49a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.a02296d1.mp3\";","import React, { Component } from 'react';\nimport { Button } from 'antd';\n\nclass Timer extends Component {\n  state = {\n    timerOn: false,\n    runningTime: 0,\n  };\n\n  startTimer = () => {\n    const { runningTime } = this.state;\n    const startTime = Date.now() - runningTime;\n    this.setState({ timerOn: true });\n    this.timer = setInterval(() => {\n      this.setState({ runningTime: Date.now() - startTime });\n    }, 20);\n  };\n\n  stopTimer = () => {\n    this.setState({ timerOn: false });\n    clearInterval(this.timer);\n  };\n\n  resetTimer = () => {\n    const { timerOn } = this.state;\n\n    if (timerOn) {\n      this.stopTimer();\n      return false;\n    }\n    return this.setState({\n      runningTime: 0,\n      timerOn: false,\n    });\n  };\n\n  msToTime = duration => {\n    let milliseconds = parseInt((duration % 1000) / 10, 10);\n    let seconds = parseInt((duration / 1000) % 60, 10);\n    let minutes = parseInt((duration / (1000 * 60)) % 60, 10);\n\n    minutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    seconds = seconds < 10 ? ` 0${seconds} ` : ` ${seconds} `;\n    milliseconds = milliseconds < 10 ? ` 0${milliseconds}` : ` ${milliseconds}`;\n    return `${minutes} : ${seconds} : ${milliseconds}`;\n  };\n\n  render() {\n    const { timerOn, runningTime } = this.state;\n    return (\n      <div className=\"timer\">\n        <div className=\"timer__inner\">\n          <h1 className=\"timer__display\">{this.msToTime(runningTime)}</h1>\n          <div className=\"timer__control\">\n            <Button\n              type={timerOn ? 'danger' : 'primary'}\n              onClick={timerOn ? this.stopTimer : this.startTimer}\n            >\n              {timerOn ? 'stop' : 'start'}\n            </Button>\n            <Button onClick={this.resetTimer}>reset</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Slider, InputNumber } from 'antd';\n\nclass CountdownInput extends PureComponent {\n  render() {\n    const {\n      handleChangeSlider,\n      handleChangeInputMinutes,\n      handleChangeInputSeconds,\n      minutes,\n      seconds,\n      disabled,\n    } = this.props;\n    return (\n      <>\n        <div className=\"countdowninput__slider\">\n          <Slider\n            min={0}\n            max={3600}\n            step={15}\n            onChange={handleChangeSlider}\n            tooltipVisible={false}\n            value={minutes * 60 + seconds}\n            disabled={disabled}\n            autoFocus\n          />\n        </div>\n        <div className=\"countdowninput__inputnumber\">\n          <div className=\"countdowninput__inputnumber-minutes\">\n            <span>minutes</span>\n            <InputNumber\n              min={0}\n              max={720}\n              step={1}\n              onChange={handleChangeInputMinutes}\n              value={minutes}\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"countdowninput__inputnumber-seconds\">\n            <span>seconds</span>\n            <InputNumber\n              min={0}\n              max={59}\n              step={1}\n              onChange={handleChangeInputSeconds}\n              value={seconds}\n              disabled={disabled}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nCountdownInput.propTypes = {\n  handleChangeSlider: PropTypes.func,\n  handleChangeInputMinutes: PropTypes.func,\n  handleChangeInputSeconds: PropTypes.func,\n  minutes: PropTypes.number,\n  seconds: PropTypes.number,\n  disabled: PropTypes.bool,\n};\nCountdownInput.defaultProps = {\n  handleChangeSlider: null,\n  handleChangeInputMinutes: null,\n  handleChangeInputSeconds: null,\n  minutes: 0,\n  seconds: 0,\n  disabled: false,\n};\nexport default CountdownInput;\n","import React, { Component } from 'react';\nimport { Button, Progress } from 'antd';\nimport CountdownInput from './CountdownInput';\nimport audioSRC from '../media/bell.mp3';\n\nclass Countdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      onCountdown: false,\n      startTimeCountdown: 0,\n      minutes: 0,\n      seconds: 0,\n      disabled: false,\n    };\n    this.audio = new Audio(audioSRC);\n  }\n\n  start = () => {\n    const { minutes, seconds } = this.state;\n    let countDownTime = minutes * 60 + seconds;\n    this.setState({\n      onCountdown: true,\n      disabled: true,\n    });\n    this.timer = setInterval(() => {\n      countDownTime -= 1;\n      if (countDownTime < 0) {\n        clearInterval(this.timer);\n        this.audio.play();\n        this.setState({ onCountdown: false, disabled: false });\n      } else {\n        this.setState({\n          minutes: Math.floor(countDownTime / 60),\n          seconds: Math.floor(countDownTime % 60),\n          onCountdown: true,\n        });\n      }\n    }, 1000);\n  };\n\n  stop = () => {\n    clearInterval(this.timer);\n    this.setState({ onCountdown: false });\n  };\n\n  reset = () => {\n    clearInterval(this.timer);\n    this.setState({ minutes: 0, seconds: 0, onCountdown: false, disabled: false });\n  };\n\n  handleChangeSlider = value => {\n    this.setState({\n      minutes: Math.floor(value / 60),\n      seconds: Math.floor(value % 60),\n      startTimeCountdown: value,\n    });\n  };\n\n  handleChangeInputMinutes = value => {\n    const { seconds } = this.state;\n    this.setState({\n      minutes: value,\n      startTimeCountdown: value * 60 + seconds,\n    });\n  };\n\n  handleChangeInputSeconds = value => {\n    const { minutes } = this.state;\n    this.setState({\n      seconds: value,\n      startTimeCountdown: value + minutes * 60,\n    });\n  };\n\n  render() {\n    const { onCountdown, startTimeCountdown, minutes, seconds, disabled } = this.state;\n    return (\n      <div className=\"countdown\">\n        <div className=\"countdown__inner\">\n          <div className=\"countdown__progress\">\n            <Progress\n              percent={Math.round(((minutes * 60 + seconds) / startTimeCountdown) * 100)}\n              showInfo={false}\n            />\n          </div>\n          <h1 className=\"countdown__display\">\n            {minutes < 10 ? `0${minutes}` : `${minutes}`} :{' '}\n            {seconds < 10 ? ` 0${seconds} ` : ` ${seconds} `}\n          </h1>\n          <div className=\"countdown__control\">\n            <Button\n              type={onCountdown ? 'danger' : 'primary'}\n              onClick={onCountdown ? this.stop : this.start}\n            >\n              {onCountdown ? 'stop' : 'start'}\n            </Button>\n            <Button onClick={this.reset}>reset</Button>\n          </div>\n          <div className=\"countdowninput\">\n            <CountdownInput\n              handleChangeSlider={this.handleChangeSlider}\n              handleChangeInputMinutes={this.handleChangeInputMinutes}\n              handleChangeInputSeconds={this.handleChangeInputSeconds}\n              disabled={disabled}\n              minutes={minutes}\n              seconds={seconds}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\n\nimport { Tabs } from 'antd';\n\nimport Timer from './components/Timer';\nimport Countdown from './components/Countdown';\nimport './App.scss';\n\nconst { TabPane } = Tabs;\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"TIMER\" key=\"1\">\n          <Timer />\n        </TabPane>\n        <TabPane tab=\"COUNTDOWN\" key=\"2\">\n          <Countdown />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}