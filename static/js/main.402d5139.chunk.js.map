{"version":3,"sources":["media/bell.mp3","components/Timer.jsx","components/CountdownInput.jsx","components/Countdown.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Timer","state","timerOn","runningTime","handleClick","setState","clearInterval","timer","startTime","Date","now","setInterval","handleReset","msToTime","duration","milliseconds","parseInt","seconds","minutes","this","className","type","onClick","Component","CountdownInput","props","onChange","disabledSlider","min","max","step","tooltipVisible","disabled","autoFocus","PureComponent","defaultProps","Countdown","startTimer","newTime","audio","play","stopTimer","handleChange","value","Audio","audioSRC","percent","Math","round","showInfo","TabPane","Tabs","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.402d5139.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.a02296d1.mp3\";","import React, { Component } from 'react';\nimport { Button } from 'antd';\n\nclass Timer extends Component {\n  state = {\n    timerOn: false,\n    runningTime: 0,\n  };\n\n  handleClick = () => {\n    this.setState(state => {\n      if (state.timerOn) {\n        clearInterval(this.timer);\n      } else {\n        const startTime = Date.now() - state.runningTime;\n        this.timer = setInterval(() => {\n          this.setState({ runningTime: Date.now() - startTime });\n        }, 20);\n      }\n      return { timerOn: !state.timerOn };\n    });\n  };\n\n  handleReset = () => {\n    clearInterval(this.timer);\n    this.setState({ runningTime: 0, timerOn: false });\n  };\n\n  msToTime = duration => {\n    let milliseconds = parseInt((duration % 1000) / 10, 10);\n    let seconds = parseInt((duration / 1000) % 60, 10);\n    let minutes = parseInt((duration / (1000 * 60)) % 60, 10);\n\n    minutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    seconds = seconds < 10 ? ` 0${seconds} ` : ` ${seconds} `;\n    milliseconds = milliseconds < 10 ? ` 0${milliseconds}` : ` ${milliseconds}`;\n    return `${minutes} : ${seconds} : ${milliseconds}`;\n  };\n\n  render() {\n    const { timerOn, runningTime } = this.state;\n    return (\n      <div className=\"timer\">\n        <div className=\"timer__inner\">\n          <h1 className=\"timer__display\">{this.msToTime(runningTime)}</h1>\n          <div className=\"timer__control\">\n            <Button type={timerOn ? 'danger' : 'primary'} onClick={this.handleClick}>\n              {timerOn ? 'stop' : 'start'}\n            </Button>\n            <Button onClick={this.handleReset}>reset</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Slider, InputNumber } from 'antd';\n\nclass CountdownInput extends PureComponent {\n  render() {\n    const { onChange, disabledSlider } = this.props;\n    return (\n      <>\n        <div className=\"countdowninput__slider\">\n          <Slider\n            min={0}\n            max={3600000}\n            step={15000}\n            onChange={onChange}\n            tooltipVisible={false}\n            disabled={disabledSlider}\n            autoFocus\n          />\n        </div>\n        <div className=\"countdowninput__inputnumber\">\n          <div className=\"countdowninput__inputnumber-minutes\">\n            <span>minutes</span>\n            <InputNumber\n              min={0}\n              max={43200000}\n              step={60000}\n              onChange={onChange}\n              disabled={disabledSlider}\n            />\n          </div>\n          <div className=\"countdowninput__inputnumber-seconds\">\n            <span>seconds</span>\n            <InputNumber\n              min={0}\n              max={43200000}\n              step={1000}\n              onChange={onChange}\n              disabled={disabledSlider}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nCountdownInput.propTypes = {\n  onChange: PropTypes.func,\n  disabledSlider: PropTypes.bool,\n};\nCountdownInput.defaultProps = {\n  onChange: null,\n  disabledSlider: false,\n};\nexport default CountdownInput;\n","import React, { Component } from 'react';\nimport { Button, Progress } from 'antd';\nimport CountdownInput from './CountdownInput';\nimport audioSRC from '../media/bell.mp3';\n\nclass Countdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerOn: false,\n      runningTime: 0,\n      startTime: 0,\n      disabledSlider: false,\n    };\n    this.audio = new Audio(audioSRC);\n  }\n\n  startTimer = () => {\n    this.setState(() => ({\n      timerOn: true,\n      disabledSlider: true,\n    }));\n\n    this.timer = setInterval(() => {\n      const { runningTime } = this.state;\n      const newTime = runningTime - 1000;\n      if (newTime >= 0) {\n        this.setState({\n          runningTime: newTime,\n        });\n      } else {\n        clearInterval(this.timer);\n        this.setState({ timerOn: false, disabledSlider: false });\n        this.audio.play();\n      }\n    }, 1000);\n  };\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n    this.setState({ timerOn: false });\n  };\n\n  handleClick = () => {\n    const { timerOn } = this.state;\n    if (timerOn) {\n      this.stopTimer();\n    } else {\n      this.startTimer();\n    }\n  };\n\n  handleReset = () => {\n    clearInterval(this.timer);\n    this.setState({ runningTime: 0, timerOn: false, disabledSlider: false });\n  };\n\n  handleChange = value => {\n    this.setState(() => ({\n      runningTime: value,\n      startTime: value,\n    }));\n  };\n\n  msToTime = duration => {\n    let seconds = parseInt((duration / 1000) % 60, 10);\n    let minutes = parseInt((duration / (1000 * 60)) % 60, 10);\n\n    minutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    seconds = seconds < 10 ? ` 0${seconds} ` : ` ${seconds} `;\n    return `${minutes} : ${seconds}`;\n  };\n\n  render() {\n    const { timerOn, startTime, runningTime, disabledSlider } = this.state;\n    return (\n      <div className=\"countdown\">\n        <div className=\"countdown__inner\">\n          <div className=\"countdown__progress\">\n            <Progress percent={Math.round((runningTime / startTime) * 100)} showInfo={false} />\n          </div>\n          <h1 className=\"countdown__display\">{this.msToTime(runningTime)}</h1>\n          <div className=\"countdown__control\">\n            <Button type={timerOn ? 'danger' : 'primary'} onClick={this.handleClick}>\n              {timerOn ? 'stop' : 'start'}\n            </Button>\n            <Button onClick={this.handleReset}>reset</Button>\n          </div>\n          <div className=\"countdowninput\">\n            <CountdownInput\n              onChange={this.handleChange}\n              disabledSlider={disabledSlider}\n              runningTime={runningTime}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\n\nimport { Tabs } from 'antd';\n\nimport Timer from './components/Timer';\nimport Countdown from './components/Countdown';\nimport './App.scss';\n\nconst { TabPane } = Tabs;\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"TIMER\" key=\"1\">\n          <Timer />\n        </TabPane>\n        <TabPane tab=\"COUNTDOWN\" key=\"2\">\n          <Countdown />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}